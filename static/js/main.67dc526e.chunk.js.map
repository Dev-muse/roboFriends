{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","Scroll","props","style","overflowY","height","boxShadow","borderRadius","margin","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAiBeA,EAbF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEtB,OACI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,gCACI,6BAAKL,IACL,4BAAIC,WCQLK,EAfE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGf,OACI,8BAGAA,EAAOC,KAAI,SAACC,EAAKC,GACP,OAAQ,cAAC,EAAD,CAAcV,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,MAAOC,GAAIO,EAAKP,IAAhDQ,SCDtBC,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,OAAOC,UAAU,oBAAoBC,aAAa,OAAOC,OAAO,SAASC,OAAO,mBAAvH,SACKP,EAAMQ,YC0BJC,G,wDA3BX,WAAYT,GAAO,IAAD,8BACd,cAAMA,IACDU,MAAQ,CACTC,UAAS,GAHC,E,qDAQd,SAAkBC,EAAOC,GAErBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAK9B,WAGI,OAFmBG,KAAKJ,MAAjBC,SAGI,wDAEAG,KAAKd,MAAMQ,a,GAvBPQ,cCaZC,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,qBAAK5B,UAAU,MAAf,SACI,uBAAOA,UAAU,gCACV6B,KAAK,SACLC,YAAY,eACZC,SAAUH,OC0DdI,E,kDAzDX,aAAe,IAAD,8BACV,gBASJC,eAAiB,SAACC,GAGd,EAAKV,SAAS,CAAEG,YAAaO,EAAMC,OAAOC,SAX1C,EAAKjB,MAAQ,CACTf,OAAQ,GACRuB,YAAa,IAJP,E,qDAiBd,WAAqB,IAAD,OAChBU,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKjB,SAAS,CAAEpB,OAAQqC,S,oBAI/C,WAAU,IAAD,EAEwBlB,KAAKJ,MAA3BQ,EAFF,EAEEA,YAAYvB,EAFd,EAEcA,OAIbsC,EAAiBtC,EAAOuC,QAAO,SAACC,GAClC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASnB,EAAYkB,kBAKzD,OAAQzC,EAAO2C,OAGP,sBAAK/C,UAAU,KAAf,UAEI,oBAAIA,UAAU,cAAd,yBACA,cAAC,EAAD,CAAW4B,aAAcL,KAAKU,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACE,cAAC,EAAD,CAAU7B,OAAQsC,WATX,oBAAI1C,UAAU,KAAd,oC,GAtCfyB,aCIHuB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAKhDX,M","file":"static/js/main.67dc526e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({name,email,id})=>{\r\n    \r\n    return (\r\n        <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-3\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"avatar\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;    ","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots})=>{\r\n    \r\n\r\n    return(\r\n        <div> \r\n            { \r\n            \r\n        robots.map((user,i)=>{\r\n                  return (<Card key={i} name={user.name} email={user.email} id={user.id} />);\r\n                             })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style={{overflowY:'scroll',height:'55vh',boxShadow:'2px 2px 4px black',borderRadius:'15px',margin:'0 auto',border:'5px solid white'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n   \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n  \r\n\r\n        componentDidCatch(error, info){\r\n\r\n            this.setState({ hasError: true })\r\n         \r\n        }\r\n\r\n\r\n        render(){\r\n            const {hasError} = this.state;\r\n            \r\n            if(hasError){\r\n                return <h1>Oops Error encountered</h1> \r\n            }else{\r\n                return this.props.children\r\n            }\r\n        }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b-green bg-light-green\" \r\n                   type=\"search\"\r\n                   placeholder=\"search robot\"\r\n                   onChange={searchChange} \r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    // changing state on search change\r\n    // always use arrow function so this keyword refers to App object and not input     \r\n    onSearchChange = (event) => {\r\n\r\n        // always use this.setState() to update searchfield value\r\n        this.setState({ searchfield: event.target.value })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }));\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const {searchfield,robots} = this.state;\r\n\r\n        //filter current state of robots object array according to value of searchfield state\r\n\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n\r\n\r\n        //condition if response from fetch api is delayed\r\n        return !robots.length ?  <h1 className=\"tc\">Loading Robots....</h1> : \r\n            (\r\n\r\n                <div className=\"tc\">\r\n\r\n                    <h1 className=\"f1 lh-title\">Robofriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                          <CardList robots={filteredRobots} />    \r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                                  \r\n                </div>\r\n            )\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}